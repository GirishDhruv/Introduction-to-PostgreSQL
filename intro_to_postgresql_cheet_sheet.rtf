{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid102\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid103\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww19000\viewh15800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 \ul \ulc0 Note: Case study outline at the bottom!\
\
TO MAKE COMMENTS/NOTES\

\b0 \ulnone Commenting/adding notes that aren't part of the query\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}To comment to the end of the current line, use '--'\
{\listtext	\'95	}To comment between two specific points use '/* ... */' \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \

\b \ul Selecting
\b0 \ulnone \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\'95	}
\b Select\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural
\ls2\ilvl1
\b0 \cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}SELECT * FROM <table>;        -- return all data (columns and rows) in the table\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\'95	}
\b Aliasing
\b0  \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural
\ls2\ilvl1\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Select <column> as col_alias from <table> as table_alias; \uc0\u8232 rename your columns and tables so you don't have to type out the full names \u8232 NOTE: columns and tables alias names must start with a letter and cannot start with a number \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li1440\fi-1440
\ls2\ilvl1\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}EX:as SELECT address as addr FROM users usr;\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\'95	}
\b Limit
\b0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural
\ls2\ilvl1\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Limit # -- only return # rows\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\'95	}
\b Unique records: Distinct and Group by \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural
\ls2\ilvl1
\b0 \cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Group by\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural
\ls2\ilvl2\cf0 {\listtext	\uc0\u8259 	}Group by <column/value>    -- will group identical rows into a single row. Must use raw column name, not alias\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural
\ls2\ilvl1\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Distinct\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural
\ls2\ilvl2\cf0 {\listtext	\uc0\u8259 	}Distinct <column> -- will only select unique rows of data selected/returned, any duplicate rows are not returned.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural
\ls2\ilvl1\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Group By/Order By & column number reference: Refer to the columns selected by the order they are returned instead of the column itself\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural
\ls2\ilvl2\cf0 {\listtext	\uc0\u8259 	}Example: SELECT status, * FROM orders ORDER BY 1 -- status is the first column returned, so this orders by status sac\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\'95	}
\b Ordering the data returned
\b0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural
\ls2\ilvl1\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Order by <column/value>     -- return results ordered by the indicated value. Must use raw column name, not alias\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural
\ls2\ilvl2\cf0 {\listtext	\uc0\u8259 	}By default order by will return ascending, use 'desc' to return descending\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural
\ls2\ilvl1\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Nulls: Nulls can be specifically addressed after the rest of the order by statement\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural
\ls2\ilvl2\cf0 {\listtext	\uc0\u8259 	}Example: SELECT * FROM orders ORDER BY status NULLS FIRST\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ul Data Types and Casting values
\b0 \
\ulnone Sometimes columns 'type' doesn't match what you're evaluating, for this use CAST\
	Note: By default cast will round for you\
	CAST(<column/result> AS <type>)\
	<column/result>::<type>\
	Examples\
		Select CAST(order_total as int), order_total from orders;\
		select order_total::INT, order_total from orders;\
	Types: \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls3\ilvl0\cf0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
numbers: \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li1440\fi-1440\sl283\slmult1
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
whole: 
\b integer
\b0 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
decimal: 
\b float
\b0 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
Decimal with limited significant values: 
\b numeric
\b0 \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li720\fi-720\sl283\slmult1
\ls3\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
text: text\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li1440\fi-1440\sl283\slmult1
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
Text with maximum size set: 
\b varchar(length)
\b0 \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li720\fi-720\sl283\slmult1
\ls3\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
true/false value:  
\b \expnd0\expndtw0\kerning0
boolean
\b0 \expnd0\expndtw0\kerning0
\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
date objects: \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li1440\fi-1440\sl283\slmult1
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
calendar date: 
\b date
\b0 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
calendar date with specific time: 
\b timestamp
\b0 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
Calendar date with specific time and timezone:  
\b timestamp without timezone
\b0 \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li720\fi-720\sl283\slmult1
\ls3\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
specific storage of key-value pairs: JSON\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
set or collection of values that all share same data type: array\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li1440\fi-1440\sl283\slmult1
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
Ex: collect of whole numbers would be an array of integers where the type for all values in the collection (array) are all integers\kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \

\b \ul Aggregate functions\ulnone  
\b0 \
If you select any columns/values that are not aggregate functions, \
   these will require a 'group by' clause to group the results and be able to perform the function results.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ul Average\ulnone : returns average of the total of the column or the calculation.  \
	AVG(<column/calculation>) \
	note: null values are not included in denominator \
	Example: SELECT avg(order_total) FROM orders;\
\ul Addition\ulnone : returns the sum of the total of the column or calculation\
	SUM(<column/calculation>)\
           non-aggregate function to get by row addition: <column> + <column>  \
				-- Note: if either column value is null, the result will be null\
\ul Count\ulnone : returns the total number of rows where the column or value is not null\
	COUNT(<column/value>)\
	COUNT(DISTINCT <column/value>) -- Will only count unique values of the column\
\ul Minimum and Maximum\ulnone : returns the minimum or maximum value of the rows for that column/calculation\
	MAX(<column/value>), MIN(<column/value>)\
	Examples:\
		Select max(order_total) as max_order, min(order_total) as min_order from orders;\
\
\ul Date Select Functions\ulnone \
	EXTRACT(Value From <date/timestamp>)\
      Examples:\
\pard\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li718\fi13\pardirnatural
\cf0 SELECT\
EXTRACT(year from created_at) as year,\
EXTRACT(month from created_at) as month,\
EXTRACT(week from created_at) as week,\
EXTRACT(day from created_at) as day\
FROM orders LIMIT 10;\
\
now()  -- return the current timestamp of the database server\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 	Interval -- Manipulate dates by adding or subtracting intervals of dates\
		interval '1 month', interval 2 days', interval '4 weeks', interval '1 year'\
		Example:\
			SELECT * FROM orders \
			WHERE now() - interval '1 month'\
\pard\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li718\fi13\pardirnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \

\b \ul CASE STATEMENTS\

\b0 \ulnone Top use: Create a classification resulting column of data based on data in the table. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab920
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ul Less often: \ulnone input to the case statement a column or value you want to evaluate the exact value of..\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab920\li558\fi6
\cf0 CASE <column/calculation>\uc0\u8232 WHEN <result>\u8232       THEN <value when exact match>\u8232 WHEN <result2>\u8232       THEN <value when exact match>\u8232 \'85\u8232 ELSE\u8232      <default value>\u8232 END\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
Example: \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li724\fi6\pardirnatural
\cf0 SELECT \
CASE coalesce(status,'') -- make the null status an blank text instead\
WHEN 'complete' then 'shipped'  -- This will \
WHEN 'ready to ship' then 'not shipped'\
WHEN 'order confirmed' then 'not shipped'\
WHEN '' then 'not shipped'  -- since we converted all nulls to empty string, I just check for the empty string here\
ELSE 'unknown status' END\
FROM orders\
GROUP BY 1 -- note you can group by the resulting case statement\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ul Most often used: \ulnone You can use this version to get the same \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab920\li562\fi-4
\cf0 CASE \uc0\u8232 WHEN <true/false result>\u8232       THEN <value when true>\u8232 WHEN <true/false result>\u8232       THEN <value when true>\'85\u8232 ELSE\u8232        <default value>\u8232 END\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Example:\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\fi735\pardirnatural
\cf0 \ulnone SELECT CASE \
WHEN status in ('complete','shipped') then 'shipped'\
WHEN status in ('ready to ship', 'order confirmed') or status IS NULL then 'not shipped'\
ELSE 'unknown status' END\
FROM orders \
GROUP BY 1\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 \ul Filtering
\b0 \ulnone \
Filter: Requires using 'WHERE' \
	WHERE <true/false evaluation/result> \
\
\pard\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li718\fi13\pardirnatural
\cf0 >, <, =  -- use less than, greater than and equal to filter numbers\
!= , <>   -- use this for \'93not equal\'94 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
and/or: Add additional clauses to your filter to either further restrict or expand the results\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li721\fi12\pardirnatural
\cf0 WHERE <true/false evaluation1> \
AND <true/false evaluation2> \
AND (<true/false evaluation3> OR <true/false evaluation4> )\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Example: \
\pard\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li725\fi3\pardirnatural
\cf0 SELECT * FROM orders\
WHERE status IS NOT NULL\
AND created_at > '2018-01-01'\
AND (order_total > 10.0 OR shipping_total > 10.0) -- grab any orders with either order or shipping total over 10\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Nulls note: If a value being evaluated is null, the results will ONLY be included when specified to include nulls\
	Example:\
		SELECT * from orders where status IS NULL\
		SELECT * from orders where status in ('ready to ship', 'order confirmed') OR status IS NULL\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ul Text\ulnone \
	like and ilike - match a string using '%' to identify where any set of characters/words is acceptable\
	like -- matches the case exactly\
	ilike -- will ignore case when matching\
	Examples: (return same results/rows)\
		SELECT * from product_types WHERE name like '%clothing' \
		SELECT * from product_types WHERE name ilike '%cLoThInG'\
\
	~ and ~* -- match the text anywhere in the column/value\
	~             -- matches case exactly\
	~*           -- will ignore case when matching\
	Examples: (results will be equivalent to the (i)like statements above)\
		SELECT * from product_types WHERE name ~ 'clothing' \
		SELECT * from product_types WHERE name ~* 'cLoThInG'\
\
\ul Date Filter Functions\
\pard\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li718\fi13\pardirnatural
\cf0 \ulnone >, <, =  -- use less than, greater than and equal to filter by date strings\
Example: get any data from 2017\
	Select * from orders where created_at >= '2017-01-01' and created_at < '2018-01-01'\
Between -- use Between to be less redundant with dates\
	Select * from orders where created_at BETWEEN '2017-01-01' and '2018-01-01'\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \

\b \ul Set Operators
\b0 \ulnone \
Union - return the unique set of rows unioned together. Columns of results being united must match\
Example: \
	SELECT product_id from order_products\
	UNION\
	SELECT product_id from cart_products\
\
Intersect - return the unique set of rows in the primary results AND in the secondary results\
Example:  get products that are currently in a cart and have been ordered in the past\
	SELECT product_id  from order_products\
	INTERSECT\
	SELECT product_id from cart_products\
\
Except - return the unique set of rows in the primary results NOT in the secondary results\
Example: products not currently in any carts\
	SELECT id as product_id FROM products\
	EXCEPT\
	SELECT product_id FROM cart_products\
\

\b \ul Joins
\b0 \ulnone \
Joins will align the values of two tables to form a single set of results with columns from both tables. \
Using a join requires giving it a clause to use to define how it will pull the data together\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ul Joining\ulnone   - There are two ways to give join the clause: using ON, and using WHERE\
	SELECT * FROM products p\
	JOIN product_types pt ON pt.id = p.product_type_id   -- define that we want results aligned on product_type for the product\
\
	SELECT * FROM products p\
	JOIN product_types pt \
	WHERE pt.id = p.product_type_id    -- define that we want results aligned on product_type for the product\
\
\ul Inner Join\ulnone  - return rows from both tables where the joined values match on the clause given, JOIN without other indicators is by default an Inner join\
	Example: Identical to before\
	SELECT * FROM products p\
	INNER JOIN product_types pt ON pt.id = p.product_type_id   -- define that we want results aligned on product_type for the product\
\
\ul outer join\ulnone  - return all rows from the primary table, fill in all values for secondary table that don\'92t match the primary with null values (otherwise same as inner join)\
	Left outer join will select the table that is first declared as the primary table\
	Right outer join will select the table being joined to the first declared table as the primary table\
	Example: this will pull all rows from products and fill in cart_product values for those that don\'92t match\
		SELECT * FROM products p\
		LEFT OUTER JOIN cart_products cp on cp.product_id = p.id\
	Example: This will pull all rows from \
	\
\ul full outer join\ulnone  - return all rows from all tables and fill in any unmatched rows with\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab920\li547\fi-5
\cf0 SELECT * FROM orders o\uc0\u8232 FULL OUTER JOIN users on o.user_id = u.id\u8232 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 Table Creation:
\b0 \
\ul Create table based on a query\ulnone \
	Creating tables: SELECT ... INTO and CREATE TABLE AS ... \
	Create a table that will remain in the database based on a query\
\
	Example: Creating an addresses table \
		SELECT address INTO addresses FROM users;\
		CREATE TABLE addresses AS SELECT address FROM users;\
\
\pard\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\fi3\pardirnatural
\cf0 \ul Create Table \ulnone \
	CREATE TABLE special_partner_products\
	( id integer PRIMARY KEY,\
	  partner_name text,\
 	 product_name text, \
 	 product_cost float,\
 	 product_purchase_date date,\
 	 sponsored_user_id integer\
	);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \
\pard\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\fi3\pardirnatural
\cf0 \
}